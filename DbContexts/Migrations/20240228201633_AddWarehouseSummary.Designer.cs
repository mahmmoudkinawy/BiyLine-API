// <auto-generated />
using System;
using BiyLineApi.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiyLineApi.DbContexts.Migrations
{
    [DbContext(typeof(BiyLineDbContext))]
    [Migration("20240228201633_AddWarehouseSummary")]
    partial class AddWarehouseSummary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BiyLineApi.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BiyLineApi.Entities.BasketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("BiyLineApi.Entities.BasketItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BasketId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CashDepositePermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreWalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("CashDepositePermissions");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CashDiscountPermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreWalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("CashDiscountPermissions");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ToStoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("SupplierInvoiceId")
                        .IsUnique()
                        .HasFilter("[SupplierInvoiceId] IS NOT NULL");

                    b.HasIndex("ToStoreId");

                    b.ToTable("ContractOrders");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QuantityPricingTierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuantityPricingTierId");

                    b.ToTable("ContractOrderProducts");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderVariationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("ContractOrderVariations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponCategory");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponUsageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("CouponsUsages");
                });

            modelBuilder.Entity("BiyLineApi.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ExpenseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptImageId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreWalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId")
                        .IsUnique();

                    b.HasIndex("ReceiptImageId")
                        .IsUnique()
                        .HasFilter("[ReceiptImageId] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ExpenseTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreWalletId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("BiyLineApi.Entities.GovernorateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("GovernorateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("BiyLineApi.Entities.GovernorateShippingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<decimal>("PickupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerExtraKilo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TraderShippingCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightTo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("TraderShippingCompanyId");

                    b.ToTable("GovernorateShippings");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingCompanyEntityID")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSpecializationId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShippingCompanyEntityID");

                    b.HasIndex("StoreId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BiyLineApi.Entities.InventoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("BiyLineApi.Entities.LegalDocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LegalDocuments");
                });

            modelBuilder.Entity("BiyLineApi.Entities.OfferEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("BiyLineApi.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("BiyLineApi.Entities.PickUpPointEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("StoreId");

                    b.ToTable("PickUpPoints");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CodeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountInStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("ThresholdReached")
                        .HasColumnType("int");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DateAdded");

                    b.HasIndex("OfferId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductTranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralOverview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ar");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductVariationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.QuantityPricingTierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("QuantityPricingTiers");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BiyLineApi.Entities.SalaryPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Deduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Increase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreWalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("SalaryPayments");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShipmentDetailsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentDetails");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CashOutType")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollectingDeliveryCost")
                        .HasColumnType("int");

                    b.Property<int>("CollectingShipmentCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PickUpPointId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingCompanyId")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreWalletId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalDiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("ValueAddedTax")
                        .HasColumnType("float");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("PickUpPointId");

                    b.HasIndex("ShippingCompanyId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreWalletId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShippingCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Collection")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryCases")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique()
                        .HasFilter("[StoreId] IS NOT NULL");

                    b.HasIndex("UserEntityId");

                    b.ToTable("ShippingCompanies");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShippingCompanyGovernorateDetailsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<decimal>("OverweightFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PickUpCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShippingCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("ShippingCompanyGovernorateDetails");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SpecializationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StockEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SourceWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("StoreId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StockTrackerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockTrackerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockTrackers");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreCategoryEntity", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StoreCategories");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreChatMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreMessages");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcceptsReturns")
                        .HasColumnType("bit");

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceInYears")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumNumberOfPieces")
                        .HasColumnType("int");

                    b.Property<int?>("NationalIdImageId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileCoverImageId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfilePictureImageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxRegistrationDocumentImageId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NationalIdImageId");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.HasIndex("ProfileCoverImageId");

                    b.HasIndex("ProfilePictureImageId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TaxRegistrationDocumentImageId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreProfileCompletenessEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAddressComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoverImageComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDetailsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNationalIdImageComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileImageComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecializationsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxImageComplete")
                        .HasColumnType("bit");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StoresProfilesCompleteness");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreWalletEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreWalletStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreWallets");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreWalletLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int?>("EmpId")
                        .HasColumnType("int");

                    b.Property<int?>("LogStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StoreWalletId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("StoreWalletId");

                    b.ToTable("StoreWalletLogs");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SubSpecializationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSpecializationImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SubSpecializationImageId")
                        .IsUnique()
                        .HasFilter("[SubSpecializationImageId] IS NOT NULL");

                    b.ToTable("SubSpecializations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SubcategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SupplierEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SupplierInvoiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Returned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SupplierInvoices");
                });

            modelBuilder.Entity("BiyLineApi.Entities.TraderShippingCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("TraderShippingCompanies");
                });

            modelBuilder.Entity("BiyLineApi.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BiyLineApi.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseLogs");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseSummaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseSummaries");
                });

            modelBuilder.Entity("ContractOrderEntityContractOrderProductEntity", b =>
                {
                    b.Property<int>("ContractOrderProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ContractOrdersId")
                        .HasColumnType("int");

                    b.HasKey("ContractOrderProductsId", "ContractOrdersId");

                    b.HasIndex("ContractOrdersId");

                    b.ToTable("ContractOrderEntityContractOrderProductEntity");
                });

            modelBuilder.Entity("ContractOrderProductEntityContractOrderVariationEntity", b =>
                {
                    b.Property<int>("ContractOrderProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ContractOrderVariationsId")
                        .HasColumnType("int");

                    b.HasKey("ContractOrderProductsId", "ContractOrderVariationsId");

                    b.HasIndex("ContractOrderVariationsId");

                    b.ToTable("ContractOrderProductEntityContractOrderVariationEntity");
                });

            modelBuilder.Entity("EmployeeEntityPermissionEntity", b =>
                {
                    b.Property<int>("EmployeePermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.HasKey("EmployeePermissionsId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("EmployeeEntityPermissionEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BiyLineApi.Entities.AddressEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany("Addresses")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.BasketEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.AddressEntity", "Address")
                        .WithMany("baskets")
                        .HasForeignKey("AddressId");

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Baskets")
                        .HasForeignKey("StoreId");

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithOne("Basket")
                        .HasForeignKey("BiyLineApi.Entities.BasketEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.BasketItemEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.BasketEntity", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.BasketItemEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CashDepositePermissionEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany("CashDepositePermissions")
                        .HasForeignKey("StoreWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CashDiscountPermissionEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany("CashDiscountPermissions")
                        .HasForeignKey("StoreWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "FromStore")
                        .WithMany("ContractOrdersFromStore")
                        .HasForeignKey("FromStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.SupplierInvoiceEntity", "SupplierInvoice")
                        .WithOne("ContractOrder")
                        .HasForeignKey("BiyLineApi.Entities.ContractOrderEntity", "SupplierInvoiceId");

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "ToStore")
                        .WithMany("ContractOrdersToStore")
                        .HasForeignKey("ToStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStore");

                    b.Navigation("SupplierInvoice");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderProductEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("ContractOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.QuantityPricingTierEntity", "QuantityPricingTier")
                        .WithMany("ContractOrderProducts")
                        .HasForeignKey("QuantityPricingTierId");

                    b.Navigation("Product");

                    b.Navigation("QuantityPricingTier");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ContractOrderVariationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductVariationEntity", "ProductVariation")
                        .WithMany("ContractOrderVariations")
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponCategory", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CategoryEntity", "Category")
                        .WithMany("CouponCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.CouponEntity", "Coupon")
                        .WithMany("CouponCategories")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Coupons")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponUsageEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CouponEntity", "Coupon")
                        .WithMany("Usage")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithMany("CouponUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ExpenseEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ExpenseTypeEntity", "ExpenseType")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.ExpenseEntity", "ExpenseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "ReceiptImage")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.ExpenseEntity", "ReceiptImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany()
                        .HasForeignKey("StoreWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("ReceiptImage");

                    b.Navigation("Store");

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ExpenseTypeEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany()
                        .HasForeignKey("StoreWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.GovernorateEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CountryEntity", "Country")
                        .WithMany("Governorates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BiyLineApi.Entities.GovernorateShippingEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.TraderShippingCompanyEntity", "TraderShippingCompany")
                        .WithMany("GovernorateShippings")
                        .HasForeignKey("TraderShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("TraderShippingCompany");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ImageEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CategoryEntity", "Category")
                        .WithMany("Images")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BiyLineApi.Entities.ExpenseEntity", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpenseId");

                    b.HasOne("BiyLineApi.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiyLineApi.Entities.ShippingCompanyEntity", "ShippingCompanyEntity")
                        .WithMany("Images")
                        .HasForeignKey("ShippingCompanyEntityID");

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Images")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Expense");

                    b.Navigation("Owner");

                    b.Navigation("Product");

                    b.Navigation("ShippingCompanyEntity");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.InventoryEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.InventoryEntity", "WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BiyLineApi.Entities.PickUpPointEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiyLineApi.Entities.OfferEntity", "Offer")
                        .WithMany("Products")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BiyLineApi.Entities.SubcategoryEntity", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId");

                    b.HasOne("BiyLineApi.Entities.SupplierEntity", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Offer");

                    b.Navigation("Store");

                    b.Navigation("Subcategory");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductTranslationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductVariationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BiyLineApi.Entities.QuantityPricingTierEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("QuantityPricingTiers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RateEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RegionEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany("Regions")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SalaryPaymentEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.EmployeeEntity", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("StoreWalletId");

                    b.Navigation("Employee");

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShipmentDetailsEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ProductVariationEntity", "ProductVariation")
                        .WithMany()
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ShipmentEntity", "Shipment")
                        .WithMany("ShipmentDetails")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShipmentEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.PickUpPointEntity", "PickUpPoint")
                        .WithMany()
                        .HasForeignKey("PickUpPointId");

                    b.HasOne("BiyLineApi.Entities.ShippingCompanyEntity", "ShippingCompany")
                        .WithMany()
                        .HasForeignKey("ShippingCompanyId");

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany()
                        .HasForeignKey("StoreWalletId");

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("PickUpPoint");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Store");

                    b.Navigation("StoreWallet");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShippingCompanyEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.ShippingCompanyEntity", "StoreId");

                    b.HasOne("BiyLineApi.Entities.UserEntity", "UserEntity")
                        .WithMany("shippingCompanyEntities")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShippingCompanyGovernorateDetailsEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany("ShippingCompanyGovernorates")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ShippingCompanyEntity", "ShippingCompany")
                        .WithMany("ShippingCompanyGovernorateDetails")
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SpecializationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Specializations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StockEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "DestinationWarehouse")
                        .WithMany("DestinationStocks")
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "SourceWarehouse")
                        .WithMany("SourceStocks")
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StockTrackerEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreCategoryEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CategoryEntity", "Category")
                        .WithMany("StoreCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("StoreCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreChatMessageEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.UserEntity", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CountryEntity", "Country")
                        .WithMany("Stores")
                        .HasForeignKey("CountryId");

                    b.HasOne("BiyLineApi.Entities.GovernorateEntity", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId");

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "NationalIdImage")
                        .WithMany()
                        .HasForeignKey("NationalIdImageId");

                    b.HasOne("BiyLineApi.Entities.UserEntity", "Owner")
                        .WithOne("Store")
                        .HasForeignKey("BiyLineApi.Entities.StoreEntity", "OwnerId");

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "ProfileCoverImage")
                        .WithMany()
                        .HasForeignKey("ProfileCoverImageId");

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "ProfilePictureImage")
                        .WithMany()
                        .HasForeignKey("ProfilePictureImageId");

                    b.HasOne("BiyLineApi.Entities.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "TaxRegistrationDocumentImage")
                        .WithMany()
                        .HasForeignKey("TaxRegistrationDocumentImageId");

                    b.Navigation("Country");

                    b.Navigation("Governorate");

                    b.Navigation("NationalIdImage");

                    b.Navigation("Owner");

                    b.Navigation("ProfileCoverImage");

                    b.Navigation("ProfilePictureImage");

                    b.Navigation("Region");

                    b.Navigation("TaxRegistrationDocumentImage");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreProfileCompletenessEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithOne("StoreProfileCompleteness")
                        .HasForeignKey("BiyLineApi.Entities.StoreProfileCompletenessEntity", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("BiyLineApi.Entities.StoreProfileCompletenessEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreWalletEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.EmployeeEntity", "Employee")
                        .WithMany("StoreWallets")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("StoreWallets")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreWalletLogs", b =>
                {
                    b.HasOne("BiyLineApi.Entities.UserEntity", "Emp")
                        .WithMany()
                        .HasForeignKey("EmpId");

                    b.HasOne("BiyLineApi.Entities.StoreWalletEntity", "StoreWallet")
                        .WithMany("Logs")
                        .HasForeignKey("StoreWalletId");

                    b.Navigation("Emp");

                    b.Navigation("StoreWallet");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SubSpecializationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.SpecializationEntity", "Specialization")
                        .WithMany("SubSpecializations")
                        .HasForeignKey("SpecializationId");

                    b.HasOne("BiyLineApi.Entities.ImageEntity", "SubSpecializationImage")
                        .WithOne("SubSpecializationImage")
                        .HasForeignKey("BiyLineApi.Entities.SubSpecializationEntity", "SubSpecializationImageId");

                    b.Navigation("Specialization");

                    b.Navigation("SubSpecializationImage");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SubcategoryEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.CategoryEntity", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SupplierEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("Suppliers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.TraderShippingCompanyEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany("TraderShippingCompanies")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseLogEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ProductVariationEntity", "ProductVariation")
                        .WithMany()
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithMany("Logs")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseSummaryEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ProductEntity", "Product")
                        .WithMany("Summaries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.WarehouseEntity", "Warehouse")
                        .WithMany("Summaries")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ContractOrderEntityContractOrderProductEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ContractOrderProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ContractOrderProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ContractOrderEntity", null)
                        .WithMany()
                        .HasForeignKey("ContractOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractOrderProductEntityContractOrderVariationEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.ContractOrderProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ContractOrderProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.ContractOrderVariationEntity", null)
                        .WithMany()
                        .HasForeignKey("ContractOrderVariationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeEntityPermissionEntity", b =>
                {
                    b.HasOne("BiyLineApi.Entities.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeePermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiyLineApi.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BiyLineApi.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BiyLineApi.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BiyLineApi.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BiyLineApi.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiyLineApi.Entities.AddressEntity", b =>
                {
                    b.Navigation("baskets");
                });

            modelBuilder.Entity("BiyLineApi.Entities.BasketEntity", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CategoryEntity", b =>
                {
                    b.Navigation("CouponCategories");

                    b.Navigation("Images");

                    b.Navigation("Products");

                    b.Navigation("StoreCategories");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CountryEntity", b =>
                {
                    b.Navigation("Governorates");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("BiyLineApi.Entities.CouponEntity", b =>
                {
                    b.Navigation("CouponCategories");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("BiyLineApi.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("SalaryPayments");

                    b.Navigation("StoreWallets");
                });

            modelBuilder.Entity("BiyLineApi.Entities.GovernorateEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Regions");

                    b.Navigation("ShippingCompanyGovernorates");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ImageEntity", b =>
                {
                    b.Navigation("SubSpecializationImage");
                });

            modelBuilder.Entity("BiyLineApi.Entities.OfferEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductEntity", b =>
                {
                    b.Navigation("ContractOrderProducts");

                    b.Navigation("Images");

                    b.Navigation("ProductTranslations");

                    b.Navigation("ProductVariations");

                    b.Navigation("QuantityPricingTiers");

                    b.Navigation("Rates");

                    b.Navigation("Stocks");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ProductVariationEntity", b =>
                {
                    b.Navigation("ContractOrderVariations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.QuantityPricingTierEntity", b =>
                {
                    b.Navigation("ContractOrderProducts");
                });

            modelBuilder.Entity("BiyLineApi.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShipmentEntity", b =>
                {
                    b.Navigation("ShipmentDetails");
                });

            modelBuilder.Entity("BiyLineApi.Entities.ShippingCompanyEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ShippingCompanyGovernorateDetails");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SpecializationEntity", b =>
                {
                    b.Navigation("SubSpecializations");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreEntity", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("ContractOrdersFromStore");

                    b.Navigation("ContractOrdersToStore");

                    b.Navigation("Coupons");

                    b.Navigation("Employees");

                    b.Navigation("Images");

                    b.Navigation("Products");

                    b.Navigation("Specializations");

                    b.Navigation("Stocks");

                    b.Navigation("StoreCategories");

                    b.Navigation("StoreProfileCompleteness")
                        .IsRequired();

                    b.Navigation("StoreWallets");

                    b.Navigation("Suppliers");

                    b.Navigation("TraderShippingCompanies");
                });

            modelBuilder.Entity("BiyLineApi.Entities.StoreWalletEntity", b =>
                {
                    b.Navigation("CashDepositePermissions");

                    b.Navigation("CashDiscountPermissions");

                    b.Navigation("Logs");

                    b.Navigation("SalaryPayments");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SubcategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SupplierEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BiyLineApi.Entities.SupplierInvoiceEntity", b =>
                {
                    b.Navigation("ContractOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("BiyLineApi.Entities.TraderShippingCompanyEntity", b =>
                {
                    b.Navigation("GovernorateShippings");
                });

            modelBuilder.Entity("BiyLineApi.Entities.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Basket");

                    b.Navigation("CouponUsages");

                    b.Navigation("Employees");

                    b.Navigation("Store");

                    b.Navigation("UserRoles");

                    b.Navigation("shippingCompanyEntities");
                });

            modelBuilder.Entity("BiyLineApi.Entities.WarehouseEntity", b =>
                {
                    b.Navigation("DestinationStocks");

                    b.Navigation("Logs");

                    b.Navigation("Products");

                    b.Navigation("SourceStocks");

                    b.Navigation("Summaries");
                });
#pragma warning restore 612, 618
        }
    }
}
